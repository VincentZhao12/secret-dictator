// Code generated by tygo. DO NOT EDIT.

//////////
// source: game.go

export interface CreateGameResponse {
  game_id: string;
}
export interface JoinGameRequest {
  game_id: string;
  username: string;
}
export interface JoinGameResponse {
  game_id: string;
  player_id: string;
}
// Code generated by tygo. DO NOT EDIT.

//////////
// source: action_message.go

export const MesasgeTypeAction: MessageType = "action";
export const MesasgeTypeActionError: MessageType = "action_error";
export interface ActionMessage {
  BaseMessage: BaseMessage;
  action: Action;
  target_index?: number /* int */;
  vote?: boolean;
}
export type ActionErrorReason = string;
export const NotAllowed: ActionErrorReason = "Action not allowed";
export const InvalidTarget: ActionErrorReason = "Targeted player is cannot be targeted for this action";
export const InvalidAction: ActionErrorReason = "Invalid action";
export const CouldNotStart: ActionErrorReason = "Could not start game";
export interface ActionErrorMessage {
  BaseMessage: BaseMessage;
  target_index: ActionErrorReason;
}

//////////
// source: game_state_message.go

export const MessageTypeGameState: MessageType = "game_state";
export interface GameStateMessage {
  BaseMessage: BaseMessage;
  game_state: GameState;
}

//////////
// source: message.go

export type MessageType = string;
export type Message = any;
export interface BaseMessage {
  type: MessageType;
  sender_id: string;
}
// Code generated by tygo. DO NOT EDIT.

//////////
// source: action.go

export type Action = string;
export const ActionStartGame: Action = "start_game";
export const ActionInvestigate: Action = "investigate";
export const ActionSpecialElection: Action = "special_election";
export const ActionPolicyPeek: Action = "policy_peek";
export const ActionExecution: Action = "execution";
export const ActionVote: Action = "vote";
export const ActionNominate: Action = "nominate";
export const ActionLegislate: Action = "legislate";
export const ActionProposeVeto: Action = "propose_veto";
export const ActionApproveVeto: Action = "approve_veto";
export const ActionRejectVeto: Action = "reject_veto";
export const ActionEndTurn: Action = "end_turn";
export const ActionNone: Action = "none";

//////////
// source: board.go

export interface ElectionTracker {
  failed_elections: number /* int */;
  max_failures: number /* int */;
}
export interface Board {
  liberal_policies: number /* int */;
  fascist_policies: number /* int */;
  fascist_slots: number /* int */;
  liberal_slots: number /* int */;
  executive_actions: { [key: number /* int */]: Action};
  election_tracker: ElectionTracker;
}

//////////
// source: card.go

export type Card = string;
export const CardLiberal: Card = "liberal";
export const CardFascist: Card = "fascist";
export const CardHidden: Card = "hidden";

//////////
// source: game_state.go

export type VoteResult = number /* int */;
export const VotePending: VoteResult = 0;
export const VoteJa: VoteResult = 1;
export const VoteNein: VoteResult = 2;
export interface GameState {
  players: Player[];
  deck: Card[];
  discard: Card[];
  board: Board;
  president_index: number /* int */;
  chancellor_index: number /* int */;
  prev_president_index: number /* int */;
  prev_chancellor_index: number /* int */;
  nominee_index: number /* int */;
  phase: GamePhase;
  votes?: VoteResult[];
  pending_action?: Action;
  peeked_cards?: Card[];
  peeker_index?: number /* int */;
  resume_order_index?: number /* int */; // Post special election
  resume_phase?: GamePhase;
  winner?: Team;
}

//////////
// source: phase.go

export type GamePhase = string;
export const Setup: GamePhase = "setup"; // TODO
export const Nomination: GamePhase = "nomination";
export const Election: GamePhase = "election";
export const Legislation1: GamePhase = "legislation1";
export const Legislation2: GamePhase = "legislation2";
export const Executive: GamePhase = "executive";
export const GameOver: GamePhase = "game_over";
export const Paused: GamePhase = "paused";

//////////
// source: player.go

export type PlayerRole = string;
export const RoleLiberal: PlayerRole = "liberal";
export const RoleHitler: PlayerRole = "hitler";
export const RoleFascist: PlayerRole = "fascist";
export const RoleHidden: PlayerRole = "hidden";
export const RoleUnassigned: PlayerRole = "unassigned";
export interface Player {
  id: string;
  username: string;
  role: PlayerRole;
  is_executed: boolean;
}

//////////
// source: team.go

export type Team = string;
export const TeamUnassigned: Team = "UNASSIGNED";
export const TeamFascist: Team = "FASCISTS";
export const TeamLiberal: Team = "LIBERALS";
